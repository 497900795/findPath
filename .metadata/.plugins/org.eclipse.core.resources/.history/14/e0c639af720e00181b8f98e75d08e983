package findPath;
import java.util.Scanner;
public class Dijkstra {
	//常量
    private static int N = Integer.MAX_VALUE/2;
    private static int Graph[][] = {
            { 0, 1, 1, N, N, N, N, N, N },
            { 1, 0, 1, 1, 1, N, N, N, N },
            { 1, 1, 0, N, 1, 1, N, N, N },
            { N, 1, N, 0, 1, N, 1, N, N },
            { N, 1, 1, 1, 0, 1, 1, 1, N },
            { N, N, 1, N, 1, 0, N, 1, N },
            { N, N, N, 1, 1, N, 0, 1, N },
            { N, N, N, N, 1, 1, 1, 0, 1 },
            { N, N, N, N, N, N, N, 1, 0 },
    };
    private static int NUM = Graph[0].length;
    
    //变量
    private static int start;
    private static int end;
    private static int flag[] = new int [NUM];
    private static int dist[]  = new int [NUM];
    private static int  path[][] = new int [NUM][NUM];
    
    public static void main(String[] args) {
    	init();
        dijkstra();
        showResult();
    }
    
    public static void dijkstra(){
    	
    }
    
    public static void init(){
    	//确定开始结点
    	System.out.print("请输入开始结点:");
    	Scanner input=new Scanner(System.in);	
    	start = input.nextInt();
    	System.out.print("请输入目标结点:");
    	end = input.nextInt();
    	input.close();
    	//path初始化
    	for(int i = 0;i < NUM;i++){
    		dist[i] = Graph[start][i];
    		if(dist[i] != 0 && dist[i] != N){
    			path[i][0] = start;
    		}
    		for(int j = 0;j < NUM;j++){
    			path[i][j] = -1;
    		}		
    	}	
    }
    
    public static void showResult(){
    	for(int i = 0;i < NUM;i++){
    		if(path[start][i] != -1){
    			System.out.print(path[end][i] + "->");
    		}	
    	}
    	System.out.print("\n");
    	System.out.println("距离:" + dist[end]);
    }
}